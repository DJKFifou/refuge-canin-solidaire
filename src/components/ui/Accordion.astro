---
// Accordion.astro
import { PortableText } from "@portabletext/react";

export interface Props {
	firstOpen?: boolean;
	items: Array<{
		title: string;
		content: string | unknown;
		type?: "text" | "portableText";
		icon?: string;
	}>;
}

const { firstOpen = false, items } = Astro.props;
---

<div class="w-full max-w-2xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
  {items.map((item, index) => (
    <div class="border-b border-gray-200 last:border-b-0">
      <button 
        class="accordion-header w-full px-6 py-4 text-left  focus:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue focus:ring-inset transition-colors duration-200 flex justify-between items-center"
        data-target={`accordion-${index}`}
        aria-expanded={index === 0 && firstOpen ? "true" : "false"}
      >
        <div class="flex items-center gap-3">
          {item.icon && (
            <img src={item.icon} class="size-7 p-1 bg-[#FFC9AD] rounded-full" />
          )}
          <span class="text-lg font-semibold text-gray-800">{item.title}</span>
        </div>
        <svg 
          class="accordion-icon w-5 h-5 text-gray-500 transform transition-transform duration-500 ease-in-out" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      <div 
        class={`accordion-content overflow-hidden transition-all duration-700 ease-in-out ${index === 0 && firstOpen ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}
        id={`accordion-${index}`}
        style="transition-property: max-height, opacity, transform; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);"
      >
        <div class="accordion-content-inner px-6 py-5 bg-white text-gray-700 leading-relaxed transform transition-transform duration-700 ease-out">
          {item.type === "portableText" ? (
            <PortableText value={item.content} />
          ) : (
            <div set:html={item.content} />
          )}
        </div>
      </div>
    </div>
  ))}
</div>

<style>
  .accordion-header[aria-expanded="true"] .accordion-icon {
    transform: rotate(180deg);
  }

  .accordion-content {
    transform: translateY(-8px);
  }

  .accordion-content.open {
    max-height: 24rem !important;
    opacity: 1 !important;
    transform: translateY(0);
  }

  .accordion-content.closing {
    transition-duration: 600ms;
    max-height: 0 !important;
    opacity: 0 !important;
    transform: translateY(-8px);
  }

  .accordion-content.opening {
    transition-duration: 700ms;
    max-height: 24rem !important;
    opacity: 1 !important;
    transform: translateY(0);
  }

  .accordion-content-inner {
    transition: transform 0.7s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .accordion-content.opening .accordion-content-inner {
    transform: translateY(0);
  }

  .accordion-content.closing .accordion-content-inner {
    transform: translateY(-12px);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const headers = document.querySelectorAll('.accordion-header');
    
    headers.forEach(header => {
      header.addEventListener('click', function() {
        const target = this.getAttribute('data-target');
        const content = document.getElementById(target);
        const isExpanded = this.getAttribute('aria-expanded') === 'true';
        
        // Fermer tous les autres accordÃ©ons avec animation douce
        headers.forEach(otherHeader => {
          if (otherHeader !== this) {
            const otherTarget = otherHeader.getAttribute('data-target');
            const otherContent = document.getElementById(otherTarget);
            
            if (otherHeader.getAttribute('aria-expanded') === 'true') {
              otherHeader.setAttribute('aria-expanded', 'false');
              otherContent.classList.remove('open', 'opening');
              otherContent.classList.add('closing');
              
              setTimeout(() => {
                otherContent.classList.remove('closing');
              }, 600);
            }
          }
        });
        
        if (isExpanded) {
          this.setAttribute('aria-expanded', 'false');
          content.classList.remove('open', 'opening');
          content.classList.add('closing');
          
          setTimeout(() => {
            content.classList.remove('closing');
          }, 600);
        } else {
          this.setAttribute('aria-expanded', 'true');

          setTimeout(() => {
            content.classList.remove('closing');
            content.classList.add('opening', 'open');
            
            setTimeout(() => {
              content.classList.remove('opening');
            }, 700);
          }, 50);
        }
      });
    });
  });
</script>