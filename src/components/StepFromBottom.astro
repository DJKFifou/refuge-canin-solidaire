---
import type { StepProps } from "./ui/CardStep.astro";
import CardStep from "./ui/CardStep.astro";

interface Props {
	steps: StepProps[];
	transparent?: boolean;
}

const { steps, transparent } = Astro.props;
---


<section
  class={`relative h-screen w-full flex justify-center items-center ${transparent ? '' : 'bg-lightBlue'}`}
  id="caca">
    {!transparent && (
    <img src="/svg/bg/wave-blue-top.svg" class="w-full absolute -top-16 rotate-180" />
  )}
  <h2
    class="h2 text-center z-0 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
    Avant chaque adoption, il y a un chemin parcouru.
  </h2>


<div class="z-10 text-center w-full px-4 mx-auto">
  <div
    id="cards-container"
    class="relative flex justify-center" 
    style="height: 400px;"
  >
    {steps.map((step, i) => (
      <div
        key={i}
        class="absolute left-1/2"
        style={`
          top: 48%;
          left:20%;
          transform: translate(-40%, -60%) translateX(${280 * i}px) rotate(${i % 2 === 0 ? -2 : 1.2}deg);
          z-index: ${100 + i};
        `}
      >
        <CardStep 
          title={step.title}
          description={step.description}
          imgSrc={step.imgSrc}
          objective={step.objective}
          i={i}
        />
      </div>
    ))}
  </div>
</div>

</div>


</section>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  function cardStepAnimation() {
    gsap.registerPlugin(ScrollTrigger);

    const cards = gsap.utils.toArray(".card-step");

    gsap.to(cards, {
      opacity: 1,
      y: 0,
      duration: 1,
      ease: "power2.out",
      stagger: 0.5,
      scrollTrigger: {
        trigger: "#caca",
        start: "top top",
        end: "+=1000",
        pin: true,
        scrub: true,
        // markers: true,
      },
    });
  }

  document.addEventListener("DOMContentLoaded", cardStepAnimation);
</script>
