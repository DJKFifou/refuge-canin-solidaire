---
import Button from "./ui/Button.astro";

interface DogImage {
	src: string;
	top: string;
	left: string;
	rotate: string;
	scale: number;
}

interface Props {
	img: DogImage[];
}

const { img } = Astro.props;
---

<div class="relative h-screen flex justify-center items-center overflow-x no-scroll bg-blue" id="box">
    <img src="/svg/bg/wave-blue-top.svg" class="absolute w-full -bottom-9" >
  <div class="absolute inset-0 z-0 pointer-events-none">
    {img.map((image, idx) => (
      <img
        src={image.src}
        alt={`Dog image ${idx + 1}`}
        class="dog-image absolute w-40 transition-all duration-300"
        style={`top: ${image.top}; left: ${image.left}; transform: rotate(${image.rotate}) scale(${image.scale}); clip-path: inset(100% 0 0 0);`}
        data-index={idx}
      />
    ))}
  </div>

  <div class="relative z-10 flex flex-col items-center text-center space-y-9 max-w-5xl mx-auto">
    <h1 class="h1">
      Ils n'attendent qu'une seconde chance. Et si c'était <span class="font-variant">vous ?</span>
    </h1>
    <p class="max-w-2xl mx-auto">
      Un refuge, des rencontres, des histoires. Adopter un chien, c'est lui donner une seconde chance, et vivre la vôtre différemment.
    </p>
    <Button src="/dogs" type="secondary" text="Adopter" icon="heart" />
  </div>
</div>


<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  function initAnimations() {
    gsap.registerPlugin(ScrollTrigger);

    const dogImages = document.querySelectorAll(".dog-image");
    const container = document.getElementById("box");
    
    dogImages.forEach((img, idx) => {
      gsap.to(img, {
        clipPath: "inset(0% 0 0 0)",
        duration: 0.7,
        delay: idx * 0.1,
        ease: "power2.out",
        scrollTrigger: {
          trigger: "#box",
          start: "top 80%",
          toggleActions: "play none none none",
        },
      });
    });

    let mouseX = 0;
    let mouseY = 0;
    let isMouseInside = false;

    if (container) {
      container.addEventListener('mouseenter', () => {
        isMouseInside = true;
      });

      container.addEventListener('mouseleave', () => {
        isMouseInside = false;
        dogImages.forEach((img, idx) => {
          gsap.to(img, {
            x: 0,
            y: 0,
            duration: 0.8,
            ease: "power2.out"
          });
        });
      });

      container.addEventListener('mousemove', (e) => {
        if (!isMouseInside) return;

        const rect = container.getBoundingClientRect();
        mouseX = (e.clientX - rect.left - rect.width / 2) / rect.width;
        mouseY = (e.clientY - rect.top - rect.height / 2) / rect.height;

        dogImages.forEach((img, idx) => {
          const parallaxFactor = (idx + 1) * 60;
          
          gsap.to(img, {
            x: mouseX * parallaxFactor,
            y: mouseY * parallaxFactor,
            duration: 0.4,
            ease: "power2.out"
          });
        });
      });
    }
  }

  document.addEventListener('DOMContentLoaded', initAnimations);
</script>